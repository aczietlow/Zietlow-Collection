Here's a question I get asked a lot, but never had an answer for until now. 

Why use getters and setters over public variables type. 

Instead of exposing fields of a class rather go for encapsulation. Not to mention making future changes easier 

Encapsulation of behavior associated with getting or setting. This allows
additional functionality like validation to me added more easily later.

Hiding the internal representation of the property while exposing the alternative representation

Insulating your public interface from change - allowing the public interface to remain constant
while the implementation changes without effecting existing consumers.

Controlling the lifetime and memory management of disposal semantics of the property -  particularly
important in non-managed memory environment (like C++ or Objective C)

Providing a debugging interception point for when a property changes at runtime - debugging when 
and where a property changed to a particular value can be quite difficult without this in some languages.

Improved interoperability with libraries that are designed to operate against property getters/setters -
Mocking, Serialization, and WPF come to mind. 

Allowing inheritors to change the semantics of how the property behaves and is exposed by overriding
the getter/setter methods

Getters and Setters can allow different access levels. For example the get may be public but the set could 
protected. 
